[{"/Users/home/Desktop/Git/adv-todo/src/index.js":"1","/Users/home/Desktop/Git/adv-todo/src/reportWebVitals.js":"2","/Users/home/Desktop/Git/adv-todo/src/App.js":"3","/Users/home/Desktop/Git/adv-todo/src/components/Todo.jsx":"4"},{"size":500,"mtime":1647973776000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1647973776000,"results":"7","hashOfConfig":"6"},{"size":166,"mtime":1647975320000,"results":"8","hashOfConfig":"6"},{"size":3892,"mtime":1648144844000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"153nwno",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/home/Desktop/Git/adv-todo/src/index.js",[],[],"/Users/home/Desktop/Git/adv-todo/src/reportWebVitals.js",[],[],"/Users/home/Desktop/Git/adv-todo/src/App.js",[],[],["24","25"],"/Users/home/Desktop/Git/adv-todo/src/components/Todo.jsx",["26"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./todo.css\"\n\nconst Todo = () => {\n    const [todoInput, setTodoInput] = useState(\"\")\n  useEffect(()=>{\n  \n  },[])\n\n    const [todoList, setTodoList] = useState([\n        {   count:null,\n            text: \"Neha\",\n            date: \"2022-01-01\",\n            time: \"00:00\",\n            del:\"X\",\n            checked:false\n\n        }\n    ])\n    const [date, setDate] = useState(\"\")\n    const [time, setTime] = useState(\"\")\n    const [count,setCount]=useState(1)\n\n    const handleClick = () => {\n        \n     if(!date || !time){\n         alert(\"Enter date and time\")\n         return\n     }\n        if (!todoInput ) {\n            alert(\"Enter something/Item already Exist\")\n            return\n        } else {\n           \n            setTodoList([...todoList, {\n                text: todoInput,\n                date,\n                time,\n                count,\n                del:\"X\",\n                checked:false\n            }])\n           \n            setCount(count+1)\n            setTodoInput(\"\")\n        }\n    }\n\n    const handleDelete=(id)=>{\n        const filtered=todoList.filter(item=>item.count!=id)\n       setTodoList(filtered)\n       \n\n    }\n    const handleClear=()=>{\n        setTodoList([ {\n            text: \"\",\n            date:\"\",\n            time:\"\",\n            count:\"\",\n            del:\"\"\n\n        }])\n    }\n  \n    const handleCheck=(id)=>{\n        \n        const filtered=[...todoList];\n        const targetInd = filtered.findIndex(el=>el.count===id)\n        filtered[targetInd].checked=!filtered[targetInd].checked\n        setTodoList(filtered)\n  \n    }\n   \n\n\n    return (\n        <>\n            <div className=\"upper\">\n                <h1>TODO LIST</h1>\n                <h3>Add Todo Here</h3>\n                <input autoFocus placeholder=\"Enter Todo...\" onChange={e => setTodoInput(e.target.value)} />\n                <input type=\"date\" onChange={e => setDate(e.target.value)} />\n                <input type=\"time\" onChange={e => setTime(e.target.value)} /><br/>\n                <button onClick={handleClick} className=\"btn btn-success\">Add Todo</button>\n            </div>\n\n            <div>\n                <table className=\"table\">\n                    <thead className=\"thead-dark\">\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Name</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Time</th>\n                            <th scope=\"col\">Status</th>\n                            <th scope=\"col\">Delete</th>\n\n                        </tr>\n                    </thead>\n                    <tbody>\n\n                        {\n                            todoList.map((item) => (\n\n                                <tr key={item.count}>\n                                    <td className=\"bullet\">â€¢</td>\n                                    <td >{item.text}</td>\n                                    <td>{item.date}</td>\n                                    <td>{item.time}</td>\n                                    {/* <td><input type=\"checkbox\" className=\"check\" checked={checked} onChange={()=>toggleChecked(item.count)}/>{checked?\"Completed\":\"Incomplete\"}</td> */}\n                                    <td><input type=\"checkbox\" className=\"check\" onChange={()=>handleCheck(item.count)}/>{item.checked?\"Completed\":\"Incomplete\"}</td>\n         \n                                    <td style={{cursor:\"pointer\"}} onClick={()=>handleDelete(item.count)} className=\"del\">{item.del}</td>\n                                </tr>\n\n                            ))\n                        }\n\n\n                    </tbody>\n                </table>\n\n\n\n            </div>\n            <button onClick={handleClear} className=\"btn btn-primary\">Clear All</button>\n        </>\n    )\n}\n\nexport default Todo;",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":50,"column":56,"nodeType":"33","messageId":"34","endLine":50,"endColumn":58},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]